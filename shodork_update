#!/bin/bash
GREEN="\033[32m"
RESET_COLOR="\033[0m"

# Define the banner text
banner_text="
  ______  _                 _                _
 / _____)| |               | |              | |
( (____  | |__    ___    __| |  ___    ____ | |  _
 \____ \ |  _ \  / _ \  / _  | / _ \  / ___)| |_/ )
 _____) )| | | || |_| |( (_| || |_| || |    |  _ (
(______/ |_| |_| \___/  \____| \___/ |_|    |_| \_)
                                                   "

# Calculate terminal width and the banner width for centering
terminal_width=$(tput cols)
banner_width=51  # Width of the longest line in the banner

# Centering each line
while IFS= read -r line; do
    # Calculate the amount of padding needed for center alignment
    padding=$(( (terminal_width - banner_width) / 2 ))
    printf "%${padding}s"  # Add left padding
    echo -e "${GREEN}${line}${RESET_COLOR}"  # Print the line in green
done <<< "$banner_text"

echo " "
echo " "

read -p "                         Enter Search Query : " search
read -p "                         Output File Name : " output

# URL encoding function
url_encode() {
    local encoded=""
    local length="${#1}"

    for (( i=0; i<length; i++ )); do
        local char="${1:i:1}"
        case "$char" in
            [a-zA-Z0-9.~_-])
                encoded+="$char"
                ;;
            *)
                encoded+=$(printf '%%%02X' "'$char")
                ;;
        esac
    done
    echo "$encoded"  # Return the encoded string
}

encoded_string=$(url_encode "$search")

# Clear the output file
> "$output"

# Pagination logic to retrieve up to 1000 results
page=1
total_results=0
max_results=1000

while [[ $total_results -lt $max_results ]]; do
    echo "Fetching page $page..."
    response=$(curl -s "https://api.shodan.io/shodan/host/search?key=s5By6j16t5yfQjFGLTm5vWOhbfrlbKdF&query=$encoded_string&page=$page")

    # Check for errors in the response
    if [[ $(echo "$response" | jq -r '.error') != "null" ]]; then
        echo "Error: $(echo "$response" | jq -r '.error')"
        break
    fi

    # Extract IPs and append them to the output file
    matches=$(echo "$response" | jq -r '.matches[].ip_str')
    if [[ -z "$matches" ]]; then
        echo "No more matches found."
        break
    fi

    echo "$matches" >> "$output"
    total_results=$((total_results + $(echo "$matches" | wc -l)))

    # Increment the page number
    page=$((page + 1))
done

echo "Total results saved: $total_results"
echo "                         Done..................."
